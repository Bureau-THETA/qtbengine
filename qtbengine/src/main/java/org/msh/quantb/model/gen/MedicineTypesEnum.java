//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.2 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
//


package org.msh.quantb.model.gen;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MedicineTypesEnum.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>{@code
 * <simpleType name="MedicineTypesEnum">
 *   <restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     <enumeration value="UNKNOWN"/>
 *     <enumeration value="First_Line"/>
 *     <enumeration value="Second_Line_Parenteral_Agent"/>
 *     <enumeration value="Fluoroquinolones"/>
 *     <enumeration value="Second_Line_Oral_Bacteriostatic"/>
 *     <enumeration value="Group_5"/>
 *     <enumeration value="Pediatric"/>
 *     <enumeration value="Other"/>
 *   </restriction>
 * </simpleType>
 * }</pre>
 * 
 */
@XmlType(name = "MedicineTypesEnum")
@XmlEnum
public enum MedicineTypesEnum {

    UNKNOWN("UNKNOWN"),
    @XmlEnumValue("First_Line")
    FIRST_LINE("First_Line"),
    @XmlEnumValue("Second_Line_Parenteral_Agent")
    SECOND_LINE_PARENTERAL_AGENT("Second_Line_Parenteral_Agent"),
    @XmlEnumValue("Fluoroquinolones")
    FLUOROQUINOLONES("Fluoroquinolones"),
    @XmlEnumValue("Second_Line_Oral_Bacteriostatic")
    SECOND_LINE_ORAL_BACTERIOSTATIC("Second_Line_Oral_Bacteriostatic"),
    @XmlEnumValue("Group_5")
    GROUP_5("Group_5"),
    @XmlEnumValue("Pediatric")
    PEDIATRIC("Pediatric"),
    @XmlEnumValue("Other")
    OTHER("Other");
    private final String value;

    MedicineTypesEnum(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MedicineTypesEnum fromValue(String v) {
        for (MedicineTypesEnum c: MedicineTypesEnum.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
